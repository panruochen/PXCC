###############################################################################
#
# A Common Configurable Makefile Template
#
# The purpose of implementing this script is help quickly deploy source code
# tree during initial phase of development. It is designed to manage one whole
# project from within one single makefile and to be easily adapted to
# different directory hierarchy by simply setting user configurable variables.
# This script is expected to be used with gcc toolchains on bash-compatible
# shell.
#
# Author: Pan Ruochen <ijkxyz@msn.com>
# Date:   2012/10/10
#
#
# You can get the latest version from here:
# https://github.com/panruochen/dragoneye
#
###############################################################################

#-----------------------------------------------------------------------------------------------------#
# User configurable variables
#
# ====================================================================================================
# GNU_TOOLCHAIN_PREFIX:   The perfix of gnu toolchain.
# ====================================================================================================
# CFLAGS:         Compiler flags.
# INCS:           Header files include paths.
# SRCS:           Sources. The entriess ending with a trailing / are taken as directories, the others
#                 are taken as files. The files with specified extension names in those directories will
#                 be automatically involved in compilation.
# COMPILE[X]:     User defined command to generate targets for the prerequisites
#                 whith the specified extension name X (i.e, X could be c, cpp, etc).
#
# EXCLUDE_FILES:  The files that are not included during compilation.
# OBJ_DIR:        The directory where object files are output.
# LDFLAGS:        Linker flags.
# STRIP_UNUSED:   Remove all unreferenced functions and data on linking.
# ====================================================================================================
# TARGET_TYPE:    The target type which can be application, shared object, archive library etc.
# TARGET:         The target name with path.
# TARGET_DEPENDS: The dependencies of the target.
# ====================================================================================================
# SRC_EXTS:       The extension names of source files.
# OBJ_EXT:        The extension name of object files.
# DEP_EXT:        The extension name of dependency files.
# ====================================================================================================
# INDEPENDENT_OF_MAKEFILE_LIST:    This project is independent of the makefile list. That is any
#                                  change of the makefile list will not cause remaking of the project.
# CENTRALIZED_SINGLE_DEPEND_FILE:  Use one single dependency file instead of
#                                  generating one dependency file for each source file.
# VERBOSE:                         Display verbose commands instead of short commands during
#                                  the make process.
#-----------------------------------------------------------------------------------------------------#

# Quiet commands
ifeq ($(VERBOSE),)
q           = @
q_compile   = @echo '  CC     $$< => $$@';
q_link      = @echo '  LINK   $@';
q_ar        = @echo '  AR     $@';
q_mkdir     = @echo '  MKDIR  $@';
q_clean     = @echo '  CLEAN';
q_distclean = @echo '  DISTCLEAN';
endif

O := $(if $(OBJ_EXT),$(OBJ_EXT),o)
D := $(if $(DEP_EXT),$(DEP_EXT),d)

ifndef SRC_EXTS
SRC_EXTS := c cpp cc cxx S s
endif
source_filters := $(foreach i,$(SRC_EXTS),%.$i)

GCC     := $(GNU_TOOLCHAIN_PREFIX)gcc
machine := $(shell $(GCC) -dumpmachine 2>/dev/null)

do_ifeq  = $(if $(subst $1,,$2),,$3)
do_ifneq = $(if $(subst $1,,$2),$3)

__rpath = $(strip $(subst /./,/, \
	$(eval ___local_var1 = $(subst ././,./,$(subst //,/,$(subst \\,/,$1)))) \
	$(if $(subst $(___local_var1),,$1),$(call __rpath,$(___local_var1)),$1)))

rpath = $(sort $(eval ___local_var1 := $(call __rpath,$1)) \
	$(filter ./,$(___local_var1)) \
	$(patsubst ./%,%,$(___local_var1)))

OBJ_DIR := $(strip $(OBJ_DIR))
objdir := $(patsubst ./%,%,$(if $(OBJ_DIR),$(call __rpath,$(OBJ_DIR)/)))

#-------------------------------------------------------------------#
# Replace the pattern .. with !! in the path names in order that    #
# no directories are out of the object directory                    #
#  $1 -- The path names                                             #
#-------------------------------------------------------------------#
remap_objdir = $(if $(objdir),$(subst ..,!!,$1),$1)

## Combine compiler flags togather.
CFLAGS = $(foreach i,$(INCS),-I$i) $(DEFINES) $(EXTRA_CFLAGS)

## Output file types:
##  EXE:  Application
##  AR:   static library
##  SO:   shared object
##  DLL:  dynamic link library
##  BIN:  raw binary
TARGET_TYPE := $(strip $(TARGET_TYPE))
ifeq ($(filter $(TARGET_TYPE),SO DLL AR EXE BIN),)
$(error Unknown TARGET_TYPE '$(TARGET_TYPE)')
endif

ifneq ($(filter DLL SO,$(TARGET_TYPE)),)
CFLAGS  += -shared
LDFLAGS += -shared
endif
ifneq ($(STRIP_UNUSED),)
CFLAGS  += -ffunction-sections -fdata-sections
LDFLAGS += --gc-sections
endif

ifeq ($(CENTRALIZED_SINGLE_DEPEND_FILE),)
CFLAGS += -MMD -MF $$@.$(D) -MT $$@
else
single_depend_file := $(objdir)depend
endif

depend_list = $(if $(INDEPENDENT_OF_MAKEFILE_LIST),,$(MAKEFILE_LIST)) $(EXTERNAL_DEPENDS)

#--------------------------------------------------#
# Exclude user-specified files from source list.   #
#  $1 -- The sources list                          #
#--------------------------------------------------#
exclude = $(filter-out $(EXCLUDE_FILES),$1)

#---------------------------------------------#
# Replace the specified suffixes with $(O).   #
#  $1 -- The file names                       #
#  $2 -- The suffixes                         #
#---------------------------------------------#
get_object_names  = $(call remap_objdir,$(addprefix $(objdir),$(foreach i,$2,$(patsubst %.$i,%.$O,$(filter %.$i,$1)))))

cmd_compile = $(q_compile)$(if $(COMPILE[$1]),$(COMPILE[$1]),$(GCC) -I$$(dir $$<) $(CFLAGS) $(CFLAGS[$$<]) -c -o $$@ $$<)

#--------------------------------------------------------------------#
# Set up a rule for compiling multiple sources files                 #
# with the specified suffix under the specified directory.           #
#  $1 -- The source directory                                        #
#  $2 -- The Source suffix                                           #
#  $3 -- Equal to $(wildcard $1*.$2)                                 #
#--------------------------------------------------------------------#
static_pattern_rule = $(if $3,$(call __static_pattern_rule,$(call get_object_names,$3,$2),$1,$2))

define __static_pattern_rule
$(patsubst ./%,%,$1: $(call remap_objdir,$(objdir)$2%.$(O)): $2%.$3) $(depend_list) | $(call remap_objdir,$(objdir)$2)
	$(call cmd_compile,$3)

endef

#--------------------------------------------------------------#
# Set up a rule for compiling one single source file.          #
#  $1 -- The prerequisite                                      #
#  $2 -- The Target                                            #
#--------------------------------------------------------------#
define compile_single
$2: $1 $(depend_list)
	$(call cmd_compile,$(patsubst .%,%,$(suffix $1)))

endef

define nl
$1

endef

construct_internal_variables = $(if $(strip $2),\
  $(call nl,sources-$1 := $2) $(call nl,objects-$1 := $(call get_object_names,$2,$(SRC_EXTS))) \
  $(call nl, __system_v1 += sources-$1) $(call nl, __system_v2 += objects-$1))

#-------------------------------------#
# Get the list of all source files    #
#-------------------------------------#
src_f    = $(call rpath,$(filter $(source_filters),$(SRCS)))
src_d    = $(call rpath,$(filter %/,$(SRCS)))
sources  = $(patsubst ./%,%,$(foreach i,$(SRC_EXTS),$(foreach j,$(src_d),$(wildcard $j*.$i))))
src_f   := $(foreach i,$(src_f),$(if $(filter $i,$(sources)),,$i))
sources := $(call exclude,$(sources) $(src_f))

__local_v2 = $(foreach i,$(filter-out ./,$(src_d)),$(foreach j,$(SRC_EXTS),\
	$(call construct_internal_variables,$i.$j,$(call exclude,$(wildcard $i*.$j)))))
__local_v2 += $(if $(filter ./,$(src_d)),$(foreach j,$(SRC_EXTS),$(call construct_internal_variables,./$j,$(call exclude,$(wildcard *.$j)))))
$(info $(__local_v2))
$(error ---------------)

ifeq ($(strip $(sources)),)
$(error Empty source list! Please check both SRCS and SRC_EXTS are correctly set.)
endif

object_dirs = $(call remap_objdir,$(patsubst %/./,%,$(addprefix $(objdir),$(sort $(dir $(sources)))))) $(dir $(TARGET))

#-------------------------------------#
# Get the list of all object files    #
#-------------------------------------#
objects = $(call get_object_names,$(sources),$(SRC_EXTS))


#--------------------------------------------------------#
# Make sure the default target "all" is the first target
#--------------------------------------------------------#
PHONY = all clean distclean

all: $(object_dirs) $(TARGET)


#----------------------------------------------------#
# Construct Rules
#----------------------------------------------------#
$(eval $(foreach i,$(src_d),$(foreach j,$(SRC_EXTS),\
	     $(call static_pattern_rule,$(filter-out ./,$i),$j,$(call exclude,$(wildcard $(filter-out ./,$i)*.$j)))))\
       $(foreach i,$(call exclude,$(src_f)),$(call compile_single,$i,\
	     $(call get_object_names,$i,$(SRC_EXTS)))))
$(call remap_objdir,$(object_dirs)) : % :
	$(q_mkdir)mkdir -p $@


#------------------------------------#
# Command to make directory          #
#  $1 -- The directory to be made    #
#------------------------------------#
define cmd_mkdir
$(q)if test ! -d "$1"; then $(q_mkdir)mkdir -p "$1"; fi

endef

ifneq ($(single_depend_file),)
$(single_depend_file): $(sources) $(filter-out $@,$(depend_list)) $(objdir)
	$(GCC) $(CFLAGS) -MM -MG $(sources) | \
sed 's#\([^[:space:]]\+\)\.$O:\s\([^[:space:]]\+\)\.\([^[:space:].]\+\s\?\)#$(objdir)\2.$O: \2.\3#g' > $@
endif

ifeq ($(TARGET_TYPE),AR)
$(TARGET): AR := $(GNU_TOOLCHAIN_PREFIX)ar
$(TARGET): $(TARGET_DEPENDS) $(objects)
	$(q_ar)rm -f $@ && $(AR) rcvs $@ $(objects)
else

ifeq ($(TARGET_TYPE),BIN)
tmp_target   = $(basename $(TARGET)).elf
LDFLAGS     += -nodefaultlibs -nostdlib -nostartfiles
$(TARGET): $(tmp_target)
	$(GNU_TOOLCHAIN_PREFIX)objcopy -O binary $(tmp_target) $@
	$(GNU_TOOLCHAIN_PREFIX)objdump -d $(tmp_target) > $(basename $(@F)).lst
	$(GNU_TOOLCHAIN_PREFIX)nm $(tmp_target) | sort -k1 > $(basename $(@F)).map
else
tmp_target   = $(TARGET)
endif

$(tmp_target): LD = $(if $(strip $(filter %.cpp %.cc %.cxx,$(sources))),$(GNU_TOOLCHAIN_PREFIX)g++,$(GCC))
$(tmp_target): $(TARGET_DEPENDS) $(objects)
	$(q_link)$(LD) $(LDFLAGS) $(objects) $(LIBS) -o $(tmp_target)

endif

clean:
	$(q_clean)rm -rf $(filter-out ./,$(objdir)) $(TARGET) $(objects)
distclean: clean
	$(q_distclean)find -name '*.$O' -o -name '*.$D' | xargs rm -f; $(if $(single_depend_file),rm -f $(single_depend_file))
printvars:
	@echo CFLAGS:  "$(CFLAGS)"
	@echo LDFLAGS: "$(LDFLAGS)"
	@echo Source List: $(sources)
	@echo Object List: $(objects)
print-%:
	@echo $* = $($*)

.DEFAULT_GOAL = all

sinclude $(if $(filter all,$(if $(MAKECMDGOALS),$(MAKECMDGOALS),$(.DEFAULT_GOAL))), \
$(if $(single_depend_file),$(single_depend_file),$(foreach i,$(objects),$i.$(D))))


