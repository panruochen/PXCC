###############################################################################
#
# A Common Configurable Makefile Template
#
# The purpose of implementing this script is help quickly deploy source code
# tree during initial phase of development. It is designed to manage one whole
# project from within one single makefile and to be easily adapted to
# different directory hierarchy by simply setting user configurable variables.
# This script is expected to be used with gcc toolchains on bash-compatible 
# shell.
#
# Author: Pan Ruochen <kudoos@163.com>
# Date:   2012/10/10
#
#
# You can get the latest version from here:
# https://github.com/panruochen/common_Makefile
#
###############################################################################

#-----------------------------------------------------------------------------------------------------#
# User configurable variables
#
# ====================================================================================================
# GNU_TOOLCHAIN_PREFIX:   The perfix of gnu toolchain.
# ====================================================================================================
# CFLAGS:         Compiler flags.
# inc-y:          Header include paths.
# src-y:          Sources. The items ending with a trailing / are regarded as directories, the others
#                 are regareded as files. The files with specified suffixes in those directories will
#                 be automatically involved in compilation.
# compile[X]:     User defined command to generate targets for the prerequisites
#                 whith the specified suffix X (i.e, X could be c, cpp, etc).
#
# EXCLUDE_FILES:  The files that are not included during compilation.
# OBJECT_DIR:     The directory where object files are output.
# LDFLAGS:        Linker flags.
# STRIP_UNUSED:   Remove all unreferenced functions and data during linking.
# ====================================================================================================
# TARGET_TYPE:    The target type which can be application, shared object, archive library etc.
# TARGET:         The path name of the final target.
# TARGET_DEPENDS: The dependent targets by the final target.
# ====================================================================================================
# SOURCE_SUFFIXES:The suffix names of source files.
# OBJECT_SUFFIX:  The suffix name of object files.
# DEPEND_SUFFIX:  The suffix name of dependency files.
# ====================================================================================================
# INDEPENDENT_OF_MAKEFILE_LIST:    This project is independent of the makefile list. That is any
#                                  change of the makefile list will not cause remaking of the project.
# CENTRALIZED_SINGLE_DEPEND_FILE:  Use one single dependency file instead of 
#                                  generating one dependency file for each source file.
# VERBOSE_COMMAND:                 Display verbose commands instead of short commands during
#                                  the make process.
#-----------------------------------------------------------------------------------------------------#

# Quiet commands
ifeq ($(VERBOSE_COMMAND),)
Q           = @
Q_compile   = @echo '  CC     $$< => $$@';
Q_link      = @echo '  LD     $@';
Q_ar        = @echo '  AR     $@';
Q_mkdir     = @echo '  MKDIR  $1';
Q_clean     = @echo '  CLEAN';
Q_distclean = @echo '  DISTCLEAN';
endif

O := $(if $(OBJECT_SUFFIX),$(OBJECT_SUFFIX),o)
D := $(if $(DEPEND_SUFFIX),$(DEPEND_SUFFIX),d)

ifndef SOURCE_SUFFIXES
SOURCE_SUFFIXES := c cpp cc cxx S s
endif
source_filters := $(foreach i,$(SOURCE_SUFFIXES),%.$i)

GCC    := $(GNU_TOOLCHAIN_PREFIX)gcc

do_ifeq  = $(if $(subst $1,,$2),,$3)
do_ifneq = $(if $(subst $1,,$2),$3)

__rpath = $(strip $(subst /./,/, \
	$(eval __internal_t = $(subst ././,./,$(subst //,/,$(subst \\,/,$1)))) \
	$(if $(subst $(__internal_t),,$1),$(call __rpath,$(__internal_t)),$1)))

rpath = $(sort $(eval __internal_t := $(call __rpath,$1)) \
	$(filter ./,$(__internal_t)) \
	$(patsubst ./%,%,$(__internal_t)))

OBJECT_DIR := $(strip $(OBJECT_DIR))
objdir := $(patsubst ./%,%,$(if $(OBJECT_DIR),$(call __rpath,$(OBJECT_DIR)/)))

#-------------------------------------------------------------------#
# Replace the pattern .. with !! in the path names in order that    #
# no directories are out of the object directory                    #
#  $1 -- The path names                                             #
#-------------------------------------------------------------------#
objdir_remap = $(if $(objdir),$(subst ..,!!,$1),$1)

## Combine compiler flags togather.
CFLAGS = $(foreach i,$(inc-y),-I$i) $(DEFINES) $(EXTRA_CFLAGS) 

## Output file types:
##  EXE:  Application
##  AR:   static library
##  SO:   shared object
##  DLL:  dynamic link library
##  BIN:  raw binary
TARGET_TYPE := $(strip $(TARGET_TYPE))
ifeq ($(filter $(TARGET_TYPE),SO DLL AR EXE BIN),)
$(error Unknown TARGET_TYPE '$(TARGET_TYPE)')
endif

ifneq ($(filter DLL SO,$(TARGET_TYPE)),)
CFLAGS  += -shared
LDFLAGS += -shared
endif
ifneq ($(STRIP_UNUSED),)
CFLAGS  += -ffunction-sections -fdata-sections
LDFLAGS += --gc-sections
endif

ifeq ($(CENTRALIZED_SINGLE_DEPEND_FILE),)
CFLAGS += -MMD -MF $$@.$(D) -MT $$@
else
single_depend_file := $(objdir)depend
endif

g_makefile_list = $(if $(INDEPENDENT_OF_MAKEFILE_LIST),,$(MAKEFILE_LIST))

#--------------------------------------------------#
# Exclude user-specified files from source list.   #
#  $1 -- The sources list                          #
#--------------------------------------------------#
exclude = $(filter-out $(EXCLUDE_FILES),$1)

#---------------------------------------------#
# Replace the specified suffixes with $(O).   #
#  $1 -- The file names                       #
#  $2 -- The suffixes                         #
#---------------------------------------------#
get_object_names  = $(call objdir_remap,$(addprefix $(objdir),$(foreach i,$2,$(patsubst %.$i,%.$O,$(filter %.$i,$1)))))

cmd_compile = $(Q_compile)$(if $(compile[$1]),$(compile[$1]),$(GCC) -I$$(dir $$<) $(CFLAGS) $(CFLAGS[$$<]) -c -o $$@ $$<)

#--------------------------------------------------------------------#
# Set up a rule for compiling multiple sources files                 #
# with the specified suffix under the specified directory.           #
#  $1 -- The source directory                                        #
#  $2 -- The Source suffix                                           #
#  $3 -- Equal to $(wildcard $1*.$2)                                 #
#--------------------------------------------------------------------#
xr_compile_multiple = $(if $3,$(call __xr_compile_multiple,$(call get_object_names,$3,$2),$1,$2))

define __xr_compile_multiple
$(patsubst ./%,%,$1: $(call objdir_remap,$(objdir)$2%.$(O)): $2%.$3) $(g_makefile_list)
	$(call cmd_compile,$3)

endef

#--------------------------------------------------------------#
# Set up a rule for compiling one single source file.          #
#  $1 -- The prerequisite                                      #
#  $2 -- The Target                                            #
#--------------------------------------------------------------#
define xr_compile_single
$2: $1 $(g_makefile_list)
	$(call cmd_compile,$(patsubst .%,%,$(suffix $1)))

endef


#---------------------------------------------#
# Set up a rule for make a directory.         #
#  $1 -- The directory                        #
#---------------------------------------------#
xr_mkdir = $(if $1,$(call __xr_mkdir,$1))

define __xr_mkdir
$1: ; $(Q_mkdir)mkdir -p $1

endef


#-------------------------------------#
# Get the list of all source files    #
#-------------------------------------#
src-f    = $(call rpath,$(filter $(source_filters),$(src-y)))
src-d    = $(call rpath,$(filter %/,$(src-y)))
sources  = $(patsubst ./%,%,$(foreach i,$(SOURCE_SUFFIXES),$(foreach j,$(src-d),$(wildcard $j*.$i))))
src-f   := $(foreach i,$(src-f),$(if $(filter $i,$(sources)),,$i))
sources := $(call exclude,$(sources) $(src-f))

ifeq ($(strip $(sources)),)
$(error Empty source list! Please check both src-y and SOURCE_SUFFIXES are correctly set.)
endif

object_dirs = $(call objdir_remap,$(patsubst %/./,%,$(addprefix $(objdir),$(sort $(dir $(sources))))) $(dir $(TARGET)))

#-------------------------------------#
# Get the list of all object files    #
#-------------------------------------#
objects = $(call get_object_names,$(sources),$(SOURCE_SUFFIXES))


#--------------------------------------------------------#
# Make sure the default target "all" is the first target
#--------------------------------------------------------#
PHONY = all clean distclean

all: $(object_dirs) $(TARGET)


#----------------------------------------------------#
# Construct Rules
#----------------------------------------------------#
$(eval $(foreach i,$(src-d),$(foreach j,$(SOURCE_SUFFIXES),\
	     $(call xr_compile_multiple,$(filter-out ./,$i),$j,$(call exclude,$(wildcard $(filter-out ./,$i)*.$j)))))\
       $(foreach i,$(call exclude,$(src-f)),$(call xr_compile_single,$i,\
	     $(call get_object_names,$i,$(SOURCE_SUFFIXES))))\
       $(foreach i,$(object_dirs),$(call xr_mkdir,$i)))

#------------------------------------#
# Command to make directory          #
#  $1 -- The directory to be made    #
#------------------------------------#
define cmd_mkdir
$(Q)if test ! -d "$1"; then $(Q_mkdir)mkdir -p "$1"; fi

endef

ifneq ($(single_depend_file),)
$(single_depend_file): $(sources) $(filter-out $@,$(g_makefile_list)) $(objdir)
	$(GCC) $(CFLAGS) -MM -MG $(sources) | \
sed 's#\([^[:space:]]\+\)\.$O:\s\([^[:space:]]\+\)\.\([^[:space:].]\+\s\?\)#$(objdir)\2.$O: \2.\3#g' > $@
endif

ifeq ($(TARGET_TYPE),AR)
$(TARGET): AR := $(GNU_TOOLCHAIN_PREFIX)ar
$(TARGET): $(TARGET_DEPENDS) $(objects)
	$(Q_ar)rm -f $@ && $(AR) rcvs $@ $(objects)
else

ifeq ($(TARGET_TYPE),BIN)
tmp_target   = $(basename $(TARGET)).elf
LDFLAGS     += -nodefaultlibs -nostdlib -nostartfiles
$(TARGET): $(tmp_target)
	$(GNU_TOOLCHAIN_PREFIX)objcopy -O binary $(tmp_target) $@
	$(GNU_TOOLCHAIN_PREFIX)objdump -d $(tmp_target) > $(basename $(@F)).lst
	$(GNU_TOOLCHAIN_PREFIX)nm $(tmp_target) | sort -k1 > $(basename $(@F)).map
else
tmp_target   = $(TARGET)
endif

$(tmp_target): LD = $(if $(strip $(filter %.cpp %.cc %.cxx,$(sources))),$(GNU_TOOLCHAIN_PREFIX)g++,$(GCC))
$(tmp_target): $(TARGET_DEPENDS) $(objects)
	$(Q_link)$(LD) $(LDFLAGS) $(objects) $(LIBS) -o $(tmp_target)

endif

clean:
	$(Q_clean)rm -rf $(filter-out ./,$(objdir)) $(TARGET) $(objects)
distclean: clean
	$(Q_distclean)find -name '*.$O' -o -name '*.$D' | xargs rm -f; $(if $(single_depend_file),rm -f $(single_depend_file))
printvars:
	@echo CFLAGS:  "$(CFLAGS)"
	@echo LDFLAGS: "$(LDFLAGS)"
	@echo Source List: $(sources)
	@echo Object List: $(objects)
print-%:
	@echo $* = $($*)

.DEFAULT_GOAL = all

sinclude $(if $(filter all,$(if $(MAKECMDGOALS),$(MAKECMDGOALS),$(.DEFAULT_GOAL))), \
$(if $(single_depend_file),$(single_depend_file),$(foreach i,$(objects),$i.$(D))))


